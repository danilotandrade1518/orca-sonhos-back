###############################
# Production Dockerfile (multi-stage)
# Target: minimal runtime image with only production deps and compiled JS
###############################

FROM node:22-alpine AS base
WORKDIR /app
ENV TZ=UTC

# ---------- Dependencies (full, for build) ----------
FROM base AS deps
ENV NODE_ENV=development
COPY package*.json ./
# Instala TODAS as dependências (incluindo dev) para compilar TypeScript e gerar dist
RUN npm ci

# ---------- Build ----------
FROM deps AS build
COPY tsconfig*.json ./
COPY src ./src
RUN npm run build

# ---------- Production deps only ----------
FROM base AS prod-deps
ENV NODE_ENV=production HUSKY=0
COPY package*.json ./
# Instala somente dependências de produção (sem scripts para evitar prepare husky)
RUN npm ci --omit=dev --ignore-scripts

# ---------- Final Runtime ----------
FROM node:22-alpine AS runtime
WORKDIR /app
ENV NODE_ENV=production \
    PORT=3000 \
    TZ=UTC

# Instala dumb-init para manejo de sinais e cria usuário não-root
RUN apk add --no-cache dumb-init && addgroup -S app && adduser -S app -G app
USER app

# Copy production node_modules then built artifacts
COPY --chown=app:app --from=prod-deps /app/node_modules ./node_modules
COPY --chown=app:app package*.json ./
COPY --chown=app:app --from=build /app/dist ./dist

EXPOSE 3000

CMD ["dumb-init", "node", "dist/index.js"]
