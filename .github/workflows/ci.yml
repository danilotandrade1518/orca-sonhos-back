name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write

jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U test" 
          --health-interval=5s 
          --health-timeout=5s 
          --health-retries=10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Run unit tests + coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_NAME: test
          DB_USER: test
          DB_PASSWORD: test

      - name: Integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_NAME: test
          DB_USER: test
          DB_PASSWORD: test

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage

  docker-build-push:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      image-digest: ${{ steps.build-push.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest
            type=sha,format=short
      - name: Build and push image
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Image digest
        run: echo "Image digest ${{ steps.build-push.outputs.digest }}"

  deploy-prod:
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      id-token: write
      contents: read
    env:
      AZURE_RESOURCE_GROUP: orcasonhos-prod-rg
      AZURE_DEPLOYMENT_NAME: orcasonhos-prod-deploy
      BICEP_FILE: infra/main.bicep
      BASE_NAME: orcasonhos-prod
      POSTGRES_SERVER_NAME: orcasonhosprodpg
      AZURE_LOCATION: eastus
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Ensure latest Azure CLI
        uses: azure/cli@v2
        with:
          inlineScript: az version
      - name: Azure CLI version
        run: az version
      - name: Set IMAGE env (digest)
        run: echo "IMAGE=ghcr.io/${{ github.repository }}@${{ needs.docker-build-push.outputs.image-digest }}" >> $GITHUB_ENV
      - name: Create resource group
        run: az group create -n $AZURE_RESOURCE_GROUP -l $AZURE_LOCATION
      - name: Show policy assignments (non-blocking)
        run: |
          az policy assignment list --query "[].{name:name, scope:scope}" -o table || true
      - name: Precompile Bicep
        run: az bicep build --file $BICEP_FILE --outfile infra/compiled.json
      - name: Deploy infra (Bicep)
        run: |
          set -euo pipefail
          echo "Starting deployment (will retry once on transient CLI stream errors)..."
          for attempt in 1 2; do
            TEMPLATE_PATH=$BICEP_FILE
            # On second attempt use precompiled JSON to avoid potential stream reuse bug
            if [ $attempt -eq 2 ]; then TEMPLATE_PATH=infra/compiled.json; fi
            if az deployment group create \
              -g $AZURE_RESOURCE_GROUP \
              -n $AZURE_DEPLOYMENT_NAME \
              --template-file $TEMPLATE_PATH \
              --mode Incremental \
              --parameters baseName=$BASE_NAME location=$AZURE_LOCATION postgresServerName=$POSTGRES_SERVER_NAME postgresAdminUser=${{ secrets.PG_ADMIN_USER }} postgresAdminPassword='${{ secrets.PG_ADMIN_PASSWORD }}' containerImage=$IMAGE; then
              echo "Deployment succeeded on attempt $attempt"; break
            else
              status=$?
              if [ $attempt -eq 1 ]; then
                echo "Deployment attempt $attempt failed (exit $status). Possible transient 'content already consumed' issue. Retrying..." >&2
                sleep 10
              else
                echo "Deployment failed after retry (exit $status)" >&2
                echo "Re-running with --debug to capture diagnostics" >&2
                az deployment group create \
                  -g $AZURE_RESOURCE_GROUP \
                  -n ${AZURE_DEPLOYMENT_NAME}-debug \
                  --template-file infra/compiled.json \
                  --mode Incremental \
                  --parameters baseName=$BASE_NAME location=$AZURE_LOCATION postgresServerName=$POSTGRES_SERVER_NAME postgresAdminUser=${{ secrets.PG_ADMIN_USER }} postgresAdminPassword='${{ secrets.PG_ADMIN_PASSWORD }}' containerImage=$IMAGE --debug || true
                exit $status
              fi
            fi
          done
      - name: Show deployment outputs
        run: az deployment group show -g $AZURE_RESOURCE_GROUP -n $AZURE_DEPLOYMENT_NAME --query properties.outputs
      - name: Run database migrations
        env:
          DB_HOST: ${{ env.POSTGRES_SERVER_NAME }}.postgres.database.azure.com
          DB_PORT: 5432
          DB_NAME: orcasonhos
          DB_USER: ${{ secrets.PG_ADMIN_USER }}@${{ env.POSTGRES_SERVER_NAME }}
          DB_PASSWORD: ${{ secrets.PG_ADMIN_PASSWORD }}
          CATEGORY_ID_ADJUSTMENT: 00000000-0000-0000-0000-000000000002
          CATEGORY_ID_TRANSFER: 00000000-0000-0000-0000-000000000003
          NODE_ENV: production
        run: |
          npm ci --omit=dev=false
          npm run migrate
